*snippy.txt* Snippet plugin for neovim.

Snippy                                                                *snippy*

==============================================================================
CONTENTS                                                     *snippy-contents*

    INTRODUCTION.........................|snippy-introduction|
    USAGE................................|snippy-usage|
    FUNCTIONS............................|snippy-functions|
    OPTIONS..............................|snippy-options|
    COMMANDS.............................|snippy-commands|
    LICENSE..............................|snippy-license|


==============================================================================
INTRODUCTION                                             *snippy-introduction*

Snippy is a lua-based snippets plugin for Neovim.


==============================================================================
USAGE                                                           *snippy-usage*

                                                          *snippy-usage-setup*
Snippy includes a `setup` function for you to quickly configure it according
to your needs.  See the |snippy-options| section for information on the
available options.
>
    lua require 'snippy'.setup({
                \     hl_group = 'Search'
                \ })
<
                                                       *snippy-usage-mappings*

Snippy comes with no mappings activated by default. So you'll want to define
some, probably.

For example, to use `<Tab>` to expand and jump forward, `<S-Tab` to jump back:
>
    imap <expr> <Tab> v:lua.snippy.can_expand_or_advance() ? '<Plug>(snippy-expand-or-advance)' : '<Tab>'
    imap <expr> <S-Tab> v:lua.snippy.can_jump(-1) ? '<Plug>(snippy-previous-stop)' : '<Tab>'
    smap <expr> <Tab> v:lua.snippy.can_jump(1) ? '<Plug>(snippy-next-stop)' : '<Tab>'
    smap <expr> <S-Tab> v:lua.snippy.can_jump(-1) ? '<Plug>(snippy-previous-stop)' : '<Tab>'
<
Of course, you can also define different mappings to expand and jump forward.
To expand with `<C-]>`, jump forward with `<C-j>`, and jump back with `<C-k>`,
set it up like this:
>
    imap <expr> <C-]> v:lua.snippy.can_expand() ? '<Plug>(snippy-expand)' : '<C-]>'
    imap <expr> <C-j> v:lua.snippy.can_jump(1) ? '<Plug>(snippy-next-stop)' : '<C-j>'
    imap <expr> <C-k> v:lua.snippy.can_jump(-1) ? '<Plug>(snippy-previous-stop)' : '<C-k>'
    smap <expr> <C-j> v:lua.snippy.can_jump(1) ? '<Plug>(snippy-next-stop)' : '<C-j>'
    smap <expr> <C-k> v:lua.snippy.can_jump(-1) ? '<Plug>(snippy-previous-stop)' : '<C-k>'
<
You can optionally define mappings for cutting the currently selected text, to
be used later by the `$VISUAL` or `$TM_SELECTED_TEXT` variables:
>
    nmap g<Tab> <Plug>(snippy-cut-text)
    xmap <Tab> <Plug>(snippy-cut-text)
<
                                                       *snippy-usage-snippets*

By default every `snippets` directory in |runtimepath| will be searched for
snippets. Snippy uses the same format as SnipMate, so the following patterns
are accepted:
    - snippets/{filetype}.snippets
    - snippets/{filetype}_{name}.snippets
    - snippets/{filetype}/{name}.snippets
    - snippets/{filetype}.snippet
    - snippets/{filetype}/{trigger}.snippet
    - snippets/{filetype}/{trigger}/{description}.snippet

Files with the `.snippet` extension contain a single snippet, while files with
the `.snippets` extension can be used declare multiple snippets using the
following format:
>
    snippet trigger1 "Description for snippet 1"
    	This is the first line.
    	This is the second line.
    snippet trigger2 "Description for snippet 2"
    	This is the first line.
    	This is the second line.
<

==============================================================================
SNIPPET SYNTAX                                         *snippy-snippet-syntax*

Snippy should be compatible with the full LSP snippet syntax, which in turn is
based on the original TextMate syntax. Additionally, the SnipMate syntax is
supported for compatibility.

Currently the parser for a particular snippet is chosen based on the the
source the snippet was loaded from. If it was loaded from a SnipMate file, the
SnipMate-style parser will be used. The default behavior is to parse using the
LSP syntax parser.

------------------------------------------------------------------------------
LSP Snippet Syntax                                         *snippy-lsp-syntax*

The full LSP snippet syntax can be found at
https://github.com/Microsoft/language-server-protocol/blob/main/snippetSyntax.md.

The only point where Snippy deviates from the LSP syntax in in the handling of
transformations. Transformations are very complex and require support for
Javascript regex parsing. Instead we support Vim-based regular expressions and
a simplified format, which see |snippy-snipmate-transform| below for more
details.

------------------------------------------------------------------------------
SnipMate Snippet Syntax                               *snippy-snipmate-syntax*

SnipMate syntax is also based on the TextMate syntax and so largely compatible
with the LSP syntax. A basic SniMate-style snippet looks like this:
>
    for (${1:i} = 0; $1 < ${2:limit}; $1++) {
    	System.out.println($1);
    }
<
                                                        *snippy-snipmate-eval*

This syntax also allows Vim code to be evaluated inside backticks (``):
>
    Current date is `strftime('%c')`
<
                                                   *snippy-snipmate-transform*

Transformations are supported for tabstops and variables, with the caveat that
Vim regular expressions are to be used instead of Javascript ones. The
`format` part is also a Vim regular substitution pattern. For instance:
>
    This ${1:word} will be changed to uppercase: ${1/.*/\U\0/g}
<
Will result in:
>
    This word will be changed to uppercase: WORD
<
                                                      *snippy-snipmate-visual*

The special variable `$VISUAL` holds text previously selected and stored using
the `snippy.cut_text()` function or the `<plug>(snippy-cut-text)` mapping.
This is equivalent to the `$TM_SELECTED_TEXT` variable defined by the
TextMate/LSP syntax.


==============================================================================
FUNCTIONS                                                   *snippy-functions*

snippy.setup({options})                                       *snippy.setup()*
    Set initial configuration for the plugin. See |snippy-options|.

snippy.can_expand()                                      *snippy.can_expand()*
    Checks if a snippet can be expanded at the current location.

snippy.can_jump({direction})                               *snippy.can_jump()*
    Checks if a jump in the indicated direction can be performed at the
    current location.

    {direction} is a integer. You can pass `-1` or  `1` to mean backward or
    forward respectively.

snippy.can_expand_or_advance()                *snippy.can_expand_or_advance()*
    Checks if a snippet can be expanded or a forward jump can be performed at
    the current location.

snippy.expand()                                              *snippy.expand()*
    Expands the current trigger at the current location.

snippy.expand_or_advance()                        *snippy.expand_or_advance()*
    Expands the current trigger if possible. Otherwise jumps to the next
    available stop.

snippy.next_stop()                                        *snippy.next_stop()*
    Jumps to the next available stop.

snippy.previous_stop()                                *snippy.previous_stop()*
    Jumps to the previous available stop.

snippy.expand_snippet({snippet}[, {trigger}])        *snippy.expand_snippet()*
    Expands {snippet} with {trigger} at the current cursor position.

    {trigger} is optional.

snippy.cut_text({mode}, {visual})                          *snippy.cut_text()*
    Cuts and stores the currently selected text, to be used later.

    {mode} is a string returned by |mode()|.

    {visual} indicates whether the function was called from visual mode.

snippy.is_active()                                        *snippy.is_active()*
    Checks whether there is an active snippet.

snippy.get_completion_items()                  *snippy.get_completion_items()*
    Returns a list of completion all items available in the current scope.

snippy.complete()                                          *snippy.complete()*
    Shows a basic completion menu at the current location.

snippy.complete_done()                                *snippy.complete_done()*
    To be called when the |CompleteDone| |autocmd| is fired, expanding any snippet
    present in the |v:completed_item| variable.


==============================================================================
OPTIONS                                                       *snippy-options*

This plugin can be configured by passing a dictionary to the lua function
`snippy.setup(...)`. The following options are supported:

snippet_dirs ~
    A comma-separated list of directories containing snippets.
        Type: |String|
        Default: &|runtimepath|

hl_group ~
    Highlight group used for placeholders.
        Type: |String|
        Default: nil

get_scopes ~
    A Lua function to return a list of scopes at the current cursor position.
        Type: Lua function.
        Default: >
            function()
                return {'_', vim.bo.filetype}
            end
<

==============================================================================
COMMANDS                                                     *snippy-commands*

:SnippyEdit {file}                                                |SnippyEdit|

    Opens an existing snippet file in a new split. Completion available.


==============================================================================
LICENCE                                                       *snippy-license*

Snippy is licensed under the MIT license.


==============================================================================
vim:tw=78:ts=8:ft=help:norl:
