*snippy.txt* Snippet plugin for neovim.
*snippy*

==============================================================================
CONTENTS                                                     *snippy-contents*

    INTRODUCTION.........................|snippy-introduction|
    USAGE................................|snippy-usage|
    FUNCTIONS............................|snippy-functions|
    OPTIONS..............................|snippy-options|
    COMMANDS.............................|snippy-commands|
    LICENSE..............................|snippy-introduction|


==============================================================================
INTRODUCTION                                             *snippy-introduction*

Snippy is a lua-based snippets plugin for Neovim.


==============================================================================
USAGE                                                           *snippy-usage*

                                                                *snippy-setup*
Snippy includes a `setup` function for you to quickly configure it according
to your needs.  See the |snippy-options| section for information on the
available options.
>
    lua require 'snippy'.setup({
                \     hl_group = 'Search'
                \ })
<
                                                             *snippy-mappings*

Snippy comes with no mappings activated by default. So you'll want to define
some, probably.

For example, to use `<Tab>` to expand and jump forward, `<S-Tab` to jump back:
>
    imap <expr> <Tab> v:lua.snippy.can_expand_or_advance() ? '<Plug>(snippy-expand-or-advance)' : '<Tab>'
    imap <expr> <S-Tab> v:lua.snippy.can_jump(-1) ? '<Plug>(snippy-previous-stop)' : '<Tab>'
    smap <expr> <Tab> v:lua.snippy.can_jump(1) ? '<Plug>(snippy-next-stop)' : '<Tab>'
    smap <expr> <S-Tab> v:lua.snippy.can_jump(-1) ? '<Plug>(snippy-previous-stop)' : '<Tab>'
<
Of course, you can also define different mappings to expand and jump forward.
To expand with `<C-]>`, jump forward with `<C-j>`, and jump back with `<C-k>`,
set it up like this:
>
    imap <expr> <C-]> v:lua.snippy.can_expand() ? '<Plug>(snippy-expand)' : '<C-]>'
    imap <expr> <C-j> v:lua.snippy.can_jump(1) ? '<Plug>(snippy-next-stop)' : '<C-j>'
    imap <expr> <C-k> v:lua.snippy.can_jump(-1) ? '<Plug>(snippy-previous-stop)' : '<C-k>'
    smap <expr> <C-j> v:lua.snippy.can_jump(1) ? '<Plug>(snippy-next-stop)' : '<C-j>'
    smap <expr> <C-k> v:lua.snippy.can_jump(-1) ? '<Plug>(snippy-previous-stop)' : '<C-k>'
<
You can also define mappings for cutting the currently selected text, to be
used later:
>
    nmap g<Tab> <Plug>(snippy-cut-text)
    xmap <Tab> <Plug>(snippy-cut-text)
<

==============================================================================
FUNCTIONS                                                   *snippy-functions*

snippy.setup({options})                                       *snippy.setup()*
    Set initial configuration for the plugin. See |snippy-options|.

snippy.can_expand()                                      *snippy.can_expand()*
    Checks if a snippet can be expanded at the current location.

snippy.can_jump({direction})                               *snippy.can_jump()*
    Checks if a jump in the indicated direction can be performed at the
    current location.

    {direction} is a integer. You can pass `-1` or  `1` to mean backward or
    forward respectively.

snippy.can_expand_or_advance()                *snippy.can_expand_or_advance()*
    Checks if a snippet can be expanded or a forward jump can be performed at
    the current location.

snippy.expand()                                              *snippy.expand()*
    Expands the current trigger at the current location.

snippy.expand_or_advance()                        *snippy.expand_or_advance()*
    Expands the current trigger if possible. Otherwise jumps to the next
    available stop.

snippy.next_stop()                                        *snippy.next_stop()*
    Jumps to the next available stop.

snippy.previous_stop()                                *snippy.previous_stop()*
    Jumps to the previous available stop.

snippy.expand_snippet({snippet}[, {trigger}])        *snippy.expand_snippet()*
    Expands {snippet} with {trigger} at the current cursor position.

    {trigger} is optional.

snippy.cut_text({mode}, {visual})                          *snippy.cut_text()*
    Cuts and stores the currently selected text, to be used later.

    {mode} is a string returned by |mode()|.

    {visual} indicates whether the function was called from visual mode.

snippy.is_active()                                        *snippy.is_active()*
    Checks whether there is an active snippet.


==============================================================================
OPTIONS                                                       *snippy-options*

TODO: documentation.


==============================================================================
COMMANDS                                                     *snippy-commands*

TODO: documentation.


==============================================================================
LICENCE                                                       *snippy-license*

Snippy is licensed under the MIT license.


==============================================================================
vim:tw=78:ts=8:ft=help:norl:
